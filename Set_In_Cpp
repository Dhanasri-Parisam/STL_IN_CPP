// SET:
---------------------------------------------------------------------------------------
Properties:
Stores unique elements.
Elements are sorted in ascending order (or in the order defined by a custom comparator).
Based on a balanced binary search tree (usually a Red-Black Tree).
Time Complexity:

Insertion, deletion, and search operations take 
O(logn) time.
---------------------------------------------------------------------------------------

#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    //set arrange them in ascending order , no duplicate will be taken
    std::set<int>se;
    se.insert(1);//{1}
    se.insert(2);//{1,2}
    se.insert(4);//{1,2,4}
    se.emplace(3);//{1,2,3,4}
    //without reverse
    
    for(auto it=se.begin();it!=se.end();++it){
       cout<<*it<<" ";
     }
     //reverse
     
     cout<<endl;
     for(auto it=se.rbegin();it!=se.rend();it++){
        cout<<*it<<" ";
     }
     cout<<endl;
     se.clear();
     
    //begin(),end(),rbegin(),rend(),size(),empty(), and swap() are same
    auto it=se.find(3);//to check if element is present
    cout<<*(it);
    auto it=se.find(6);//if element is not present goes to last+1 address
    //how to erase
    se.erase(5)//erase 5 {1,2,3,4}
    auto it=se.find(4);
    se.erase(it);//it removes the position and value at that particular address
    auto it1=se.find(2);
    auto it2=se.find(4);
    se.erase(it1,it2); //erase in the given range from first to last-1 --> from it1 to it2-1 it erases 
    //count
    int c=se.count(1);//if it present count is 1 else 0
    if (lb != se.end()) {
    cout << "Lower bound of 10: " << *lb << endl;
    } else {
     cout << "No lower bound found for 10." << endl;
    } 

    if (ub != se.end()) {
      cout << "Upper bound of 10: " << *ub << endl;
    } else {
    cout << "No upper bound found for 10." << endl;
    }
}

------------------------------------------------------------------------------------------------
//unordered_set

Properties:

Stores unique elements.
Elements are stored in no specific order.
Based on a hash table.
Time Complexity:

Average time complexity for insertion, deletion, and search is 
𝑂(1)
In the worst case, operations can take 
O(n) time 
-------------------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
using namespace std;

int main() {
    unordered_set<int> us;
    us.insert(10);
    us.insert(5);
    us.insert(20);
    us.insert(10);  // Won't insert a duplicate
    for(auto x : us)
        cout << x << " ";  // Output: Elements in arbitrary order, e.g., 20 5 10
    return 0;
}
---------------------------------------------------------------------------------
//Multi set:
Properties:

Stores duplicate elements (i.e., multiple occurrences of the same value are allowed).
Elements are sorted in ascending order (or in the order defined by a custom comparator).
Based on a balanced binary search tree (usually a Red-Black Tree).
Time Complexity:

Insertion, deletion, and search operations take 
O(logn) time.

#include <iostream>
#include <set>
using namespace std;

int main() {
    multiset<int> ms;
    ms.insert(10);
    ms.insert(5);
    ms.insert(20);
    ms.insert(10);  // Will insert a duplicate
    for(auto x : ms)
        cout << x << " ";  // Output: 5 10 10 20
    return 0;
}
