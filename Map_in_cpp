//Map(key:value):
#include<iostream>
#include<iterator>
#include<map>
using namespace std;
int main()
{
    map<int,int>dic;//key:value pair
    //stores data in sorted , sorted will be on keys

    map<int,pair<int,int>>dic1;//one key may have set of pairs

    map<pair<int,int>,int>dic2;//set of keys may have one value

    dic[1]=2;//dic={{1,2}}
    dic.emplace({3,1});
    dic.insert({2,4});
    {{1,2},
     {2,4},
     {3,1}
    }
    for(auto it:dic)
    {
        cout<<it.first<<" "<<it.second;
    }

    dic2[{2,3}]=10;//set of keys have one value
    cout<<dic[2];//prints 4
    cout<<dic[5];//gives 0 as it is not preasent

    auto it=dic.find(3);//gives the position where 3 is found
    auto it=dic.find(5);//position to the end as 5 is not present
    dic.emplace(3, 20);
    dic.insert({30, 40});

    // Finding the key '3'
    auto it = dic.find(3);

    // Check if key '3' is found
    if (it != dic.end()) {
        cout << "Key found: " << it->first << ", Value: " << it->second << endl;
    } else {
        cout << "Key 3 not found in the map." << endl;
    }

    //lower and upper bound works
    auto it=dic.lower_bound(3);
    auto it=dic.upper_bound(5);
    //erase swap begin end size will works
    //we have multi map which allowes you to store same key and value
    //pair for multiple times

//unordered_map:
#include<iostream>
#include<unordered_map>
using namespace std;

int main() {
    // Declare an unordered_map that maps integers to integers
    unordered_map<int, int> umap;

    // Insert elements into the unordered_map
    umap.emplace(10, 20);
    umap.insert({30, 40});
    umap.insert({10,30});
    umap[50] = 60;  // Using operator[] for inser
    cout << "Value for key 10: " << umap[10] << endl;
    auto it = umap.find(30);  // Finding key 30
    if (it != umap.end()) {
        cout << "Found key 30 with value: " << it->second << endl;
    } else {
        cout << "Key 30 not found" << endl;
    }

    return 0;
}

//multi map:
#include<iostream>
#include<map>
using namespace std;

int main() {
    map<int, int> mpp;

    // Inserting key-value pairs into the map
    mpp.insert({1, 2});
    mpp.insert({1, 2});  // This will be ignored because key '1' already exists
    mpp.insert({3, 4});
    mpp.insert({5, 6});

    // Printing the elements in the map
    cout << "All elements in the map:" << endl;
    for (auto &pair : mpp) {
        cout << "Key: " << pair.first << ", Value: " << pair.second << endl;
    }

    // Using equal_range on key '1'
    auto range = mpp.equal_range(1);  // Will return a single element for key '1'
    cout << "\nElements with key 1:" << endl;
    for (auto it = range.first; it != range.second; ++it) {
        cout << "Key: " << it->first << ", Value: " << it->second << endl;
    }

    return 0;
}
}
