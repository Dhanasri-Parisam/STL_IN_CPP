#include<iostream>
#include<list>
#include<iterator>>
int main()
{
    list<int> lis;
    //append the element
    lis.push_back(1);//{1}
    lis.emplace_back(2);//{2}
    //what if you want push at front
    lis.push_front(5);//{5,1,2}
    list.emplace_front();
}


#include <iostream>
#include <list>

int main() {
    std::list<int> lis = {1, 2, 3}; // Initialize list with values
    lis.push_back(10); // Add 10 to the end of the list
    lis.emplace_back(20); // Add 20 to the end of the list using emplace_back
    lis.push_front(0); // Add 0 to the front of the list
    lis.push_front(10);
    // Print the list to verify the results
    for (const int &value : lis) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}


// USING QUEUES

#include <iostream>
#include <list>

int main() {
    std::list<int> dequeue = {1, 2, 3}; // Initialize list with values
    lis.push_back(10); // Add 10 to the end of the list
    lis.emplace_back(20); // Add 20 to the end of the list using emplace_back
    lis.push_front(0); // Add 0 to the front of the list
    lis.push_front(10);
    // Print the list to verify the results
    for (const int &value : lis) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}

//USING STACKS:

#include <iostream>
#include <stack> // Include the stack header
using namespace std;

int main() {
    stack<int> st; // Declare a stack of integers

    // Add elements to the stack
    st.push(2);    
    st.push(10);   
    st.push(20);

    // Print the top element of the stack
    cout << st.top() << endl; // This will print 20, the top element
    cout << st.size() << endl;
    cout << st.empty() << endl;
    return 0;
}
