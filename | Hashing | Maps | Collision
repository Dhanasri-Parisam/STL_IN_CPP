
// Hashing in c++
//Inside main-->1e7
//globally -->1e8 

/*
input:
5
1 12 1 4 4
5
1 
12  
4
2 
3
*/
/*
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int hash[13]={0};
    for(int i=0;i<n;i++){
        hash[arr[i]]+=1;
    }
    int q;
    cin>>q;
    while(q--){
        int num;
        cin>>num;
        //fetching
        cout<<hash[num]<<endl;
    }
}
*/

//Only wants a-z characters:
/*
#include<bits/stdc++.h>
#include<string.h>
using namespace std;
int main(){
    string s;
    cin>>s;

    //pre computing:
    int hash[26]={0};
    for(int i=0;i<s.size();i++){
         hash[s[i]-'a']+=1;  // increment a-z
    }
    int q;
    cin>>q;
    while(q--){
        char c;
        cin>>c;
        //fething   -->'a', hash['a'] will be hash[97].
        cout<<hash[c-'a']<<endl;  //how many time appers count
    }
}
*/

//all characters:
//With this, you're now able to handle not just lowercase letters, but also uppercase letters, digits, punctuation marks, and other characters that are part of the extended ASCII set.
/*
#include<bits/stdc++.h>
#include<string.h>
using namespace std;
int main(){
    string s;
    cin>>s;

    //pre computing:
    int hash[256]={0};
    for(int i=0;i<s.size();i++){
         hash[s[i]]+=1;
    }
    int q;
    cin>>q;
    while(q--){
        char c;
        cin>>c;
        //fething
        cout<<hash[c]<<endl;
    }
}
*/

Collision:
-------------------------------------------------------------------------------------
hash value=key%table size
ex:
Index  0: 700
Index  1: 50 -> 85 -> 92 (collisions)
Index  2: 
Index  3: 73 -> 101 (collision)
Index  4: 
Index  5: 
Index  6: 76

/*========================================================================================================================*/

Map:
--------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
#include<map>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    map<int,int>mpp;
    for(int i=0;i<n;i++){
        mpp[arr[i]]+=1;
    }
    int q;
    cin>>q;
    while(q--){
        int num;
        cin>>num;
        cout<<mpp[num]<<endl;
    }
    
}

un-ordered map:
---------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;
 
void Frequency(int arr[], int n)
{
    unordered_map<int, int> map;
 
    for (int i = 0; i < n; i++)
        map[arr[i]]++;
 
    // Traverse through map and print frequencies
    for (auto x : map)
        cout << x.first << "->" << x.second << endl;
}
 
int main()
{
    int arr[] = {10,5,10,15,10,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    Frequency(arr, n);
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;
 
void countFreq(int arr[], int n)
{
    vector<bool> visited(n, false);
 
    for (int i = 0; i < n; i++) {
 
        // Skip this element if already processed
        if (visited[i] == true)
            continue;
 
        // Count frequency
        int count = 1;
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                visited[j] = true;
                count++;
            }
        }
        cout << arr[i] << " " << count << endl;
    }
}
 
int main()
{
    int arr[] = {10,5,10,15,10,50};
    int n = sizeof(arr) / sizeof(arr[0]);
    countFreq(arr, n);
    return 0;
}
---------------------------------------------------------------------------------------------------------
// character count using map:

#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    cin >> s;

    // Precomputing frequency
    map<char, int> mpp;
    for(int i = 0; i < s.size(); i++){
        mpp[s[i]] += 1;  // Increment frequency for each character
    }

    int q;
    cin >> q;
    while(q--){
        char c;
        cin >> c;

        // Fetching the frequency
        cout << mpp[c] << endl;
    }
}

Time complexity:
-------------------------------------------
Unordered Map (Hash Map):
  - Avg: O(1)
  - Worst: O(n)

Ordered Map (Tree Map):
  - O(log n)
